library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
setwd("~/Documents/CMEECourseWork/Week7/code")
library(igraph) # Load the igraph package
library(igraph) # Load the igraph package
rm(list = ls())
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
#Create graph object
net <-
graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Create graph object
graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
?graph.adjacency
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("Hosting Partner", "Non-hosting Partner", "University"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
setwd("~/Documents/CMEECourseWork/Week3/code")
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
rm(list = ls())
library(lattice)
require(ggplot2)
PPData <- as.data.frame(read.csv("../data/EcolArchives-E089-51-D1.csv"))
View(PPData)
p <- ggplot(PPData, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
pdf("../results/PP_Regress_Results.pdf")
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
dev.off()
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
rm(list = ls())
library(lattice)
require(ggplot2)
PPData <- as.data.frame(read.csv("../data/EcolArchives-E089-51-D1.csv"))
View(PPData)
p <- ggplot(PPData, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
pdf("../results/PP_Regress_Results.pdf")
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
dev.off()
# Plotvlog predator mass against log prey massqith
p <- ggplot(PPData, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
p
# Plotvlog predator mass against log prey massqith
ggplot(PPData, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
pdf("../results/PP_Regress_Results.pdf")
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
dev.off()
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
#View data
View(PPData)
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Week3/code")
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
rm(list = ls())
# Packages
library(lattice)
require(ggplot2)
# Read in data
PPData <- as.data.frame(read.csv("../data/EcolArchives-E089-51-D1.csv"))
#View data
View(PPData)
# Open new file to plot graph into
pdf("../results/PP_Regress_Results.pdf")
# Plot graphs of log prey mass against log predator mass subset by feeding interaction with different coloured lines for different predator life stages
qplot(x= log(Prey.mass), y = log(Predator.mass), facets = Type.of.feeding.interaction ~., data = PPData,
colour = Predator.lifestage, shape = I(3)) + geom_smooth(method = "lm",fullrange = TRUE)
# Close graph and save file
dev.off()
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage):
for (feedinginteraction in PPData$Type.of.feeding.interaction):
lm(Predator.mass ~ Prey.mass, PPData, Predator.lifestage)
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage):
for (feedinginteraction in PPData$Type.of.feeding.interaction):
lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction)
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage):
lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction)
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage){
lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction)
}
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage){
print(lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
}
# Running linear models for each graph within the plot
for (lifestage in PPData$Predator.lifestage){
print(lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
}
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R', echo=TRUE)
# Running linear models for each graph within the plot
LinearModelResults <- c()
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
}
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1)
}
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1)
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1)
}
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1)
}
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1)
}
View(LinearModelResults)
lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction
)
summary(lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(M1$coefficients)
View(LinearModelResults)
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
for (lifestage in PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
View(LinearModelResults)
for (lifestage in unique.PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
View(LinearModelResults)
for (lifestage in unique.PPData$Predator.lifestage){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
for (lifestage in unique(PPData$Predator.lifestage){
for (lifestage in unique(PPData$Predator.lifestage)){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, Type.of.feeding.interaction))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
for (lifestage in unique(PPData$Predator.lifestage)){
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction))
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction))
)
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
M1
for (lifestage in unique(PPData$Predator.lifestage)){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
View(LinearModelResults)
for (lifestage in unique(PPData$Predator.lifestage)){
print(lifestage)
#M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
#LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
for (lifestage in unique(PPData$Predator.lifestage)){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
#LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
for (lifestage in unique(PPData$Predator.lifestage)){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
LinearModelResults <- cbind(lifestage, M1$coefficients, M1$residuals)
}
LinearModelResults <- cbind(lifestage, M1$coefficients1, M1$residuals)
for (lifestage in unique(PPData$Predator.lifestage)){
M1 <- (lm(Predator.mass ~ Prey.mass, PPData, unique(Type.of.feeding.interaction)))
LinearModelResults <- cbind(lifestage, M1$coefficients1, M1$residuals)
}
View(LinearModelResults)
rm(list = ls())
install.packages("sqldf")
source('~/Documents/CMEECourseWork/Week3/code/PP_Regress.R')
