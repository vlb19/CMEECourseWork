##########################################
# Question 26
spiral <- function(start_position, direction, length)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition <- turtle(start_position, direction, length)
#Set a limit to the line length
if (length > 0.08){
# call this function within itself to plot subsequent lines, adjusting the
# angle by 45 degrees with each plot and reducing the line length by 5% each time
spiral(endposition, direction - (pi / 4), length <- 0.95*length)
}
return("You get a spiral but it comes back with an error message saying 7970404 is too close to the limit. This is because the graph is trying to plot a line whose length is too small for R to plot (i.e. the line length is too close to the lower limit that R is able to plot)")
}
##########################################
# Question 26
spiral <- function(start_position, direction, length)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition <- turtle(start_position, direction, length)
#Set a limit to the line length
if (length > 0.08){
# call this function within itself to plot subsequent lines, adjusting the
# angle by 45 degrees with each plot and reducing the line length by 5% each time
spiral(endposition, direction - (pi / 4), length <- 0.95*length)
}
return("You get a spiral but it comes back with an error message saying 7970404 is too close to the limit. This is because the graph is trying to plot a line whose length is too small for R to plot (i.e. the line length is too close to the lower limit that R is able to plot)")
}
##########################################
# Question 26
spiral <- function(start_position, direction, length)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition <- turtle(start_position, direction, length)
#Set a limit to the line length
if (length > 0.06){
# call this function within itself to plot subsequent lines, adjusting the
# angle by 45 degrees with each plot and reducing the line length by 5% each time
spiral(endposition, direction - (pi / 4), length <- 0.95*length)
}
return("You get a spiral but it comes back with an error message saying 7970404 is too close to the limit. This is because the graph is trying to plot a line whose length is too small for R to plot (i.e. the line length is too close to the lower limit that R is able to plot)")
}
draw_spiral()
##########################################
# Question 26
spiral <- function(start_position, direction, length)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition <- turtle(start_position, direction, length)
#Set a limit to the line length
if (length > 0.05){
# call this function within itself to plot subsequent lines, adjusting the
# angle by 45 degrees with each plot and reducing the line length by 5% each time
spiral(endposition, direction - (pi / 4), length <- 0.95*length)
}
return("You get a spiral but it comes back with an error message saying 7970404 is too close to the limit. This is because the graph is trying to plot a line whose length is too small for R to plot (i.e. the line length is too close to the lower limit that R is able to plot)")
}
draw_spiral()
draw_tree()
Challenge_F()
Challenge_F()
##########################################
# Challenge question F - This plot takes less than a minute to run
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
# Set starting parameters
start_position = c(5,0)
direction = (pi / 2)
length = 3
dir=1
# Set the line length limits we want to iterate through
maxlengths = c(rev(seq(0.01, 2, by=0.5)))
# Define new fern function with a changeable length limit
fern3 <- function(start_position, direction, length, dir, lengthlimit)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > lengthlimit){
# Plot the fractal to the right or left depending on the direction
fern3(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir, lengthlimit)
# Plot a straight line following the direction from which the fractal branches
fern3(endposition1, direction, 0.87*length, dir = dir * -1, lengthlimit)
}
}
# Initialise the plot
plot(1, type = "n", xlab="", ylab="", xlim = c(0,12), ylim= c(0,23), axes=FALSE)
# Define new function to plot a single iteration of the length limit variable
Singleframe <- function(maxlength, length){
#for (x in maxlengths){
# Call the new fern function with some starting values
fern3(start_position,direction, length, 1, maxlength)
}
# Create an animated plot to show the effect of changing line length on the plot
for (x in maxlengths) {
if (x > 0.1){
# create a lag between one plot an the next to make an animation
Sys.sleep(0.5)
# plot the fern
Singleframe(x, length)
# To allow the system time to plot the new fractal we need to increase the lag
# between frames. When the line limit is above 0.05 the lag is increased to 5 seconds
} else if (x > 0.05) {
Sys.sleep(5)
Singleframe(x, length)
# For the last plot the lag is increased to 10 seconds
} else {
Sys.sleep(10)
Singleframe(x, length)
}
}
return("Generally, the complexity of the fractal (or the bushyness of the fern) decreases the higher the value of the length limit although small changes do not have a great impact when the length limit is very large (shown by the gradual thickening of the line in the first stages of the tree). The time taken to plot also increases with the decreasing size of the line limit (shown by the slowing of the plot towards the end of the animation). This is because the dimensions of the fractal are increasing with decreasing size of line limit, R is plotting more lines and therefore takes longer to generate the graph.")
}
Challenge_F()
##########################################
# Challenge question F - This plot takes less than a minute to run
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
# Set starting parameters
start_position = c(5,0)
direction = (pi / 2)
length = 3
dir=1
# Set the line length limits we want to iterate through
maxlengths = c(rev(seq(0.01, 2, by=0.05)))
# Define new fern function with a changeable length limit
fern3 <- function(start_position, direction, length, dir, lengthlimit)  {
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > lengthlimit){
# Plot the fractal to the right or left depending on the direction
fern3(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir, lengthlimit)
# Plot a straight line following the direction from which the fractal branches
fern3(endposition1, direction, 0.87*length, dir = dir * -1, lengthlimit)
}
}
# Initialise the plot
plot(1, type = "n", xlab="", ylab="", xlim = c(0,12), ylim= c(0,23), axes=FALSE)
# Define new function to plot a single iteration of the length limit variable
Singleframe <- function(maxlength, length){
#for (x in maxlengths){
# Call the new fern function with some starting values
fern3(start_position,direction, length, 1, maxlength)
}
# Create an animated plot to show the effect of changing line length on the plot
for (x in maxlengths) {
if (x > 0.1){
# create a lag between one plot an the next to make an animation
Sys.sleep(0.5)
# plot the fern
Singleframe(x, length)
# To allow the system time to plot the new fractal we need to increase the lag
# between frames. When the line limit is above 0.05 the lag is increased to 5 seconds
} else if (x > 0.05) {
Sys.sleep(5)
Singleframe(x, length)
# For the last plot the lag is increased to 10 seconds
} else {
Sys.sleep(10)
Singleframe(x, length)
}
}
return("Generally, the complexity of the fractal (or the bushyness of the fern) decreases the higher the value of the length limit although small changes do not have a great impact when the length limit is very large (shown by the gradual thickening of the line in the first stages of the tree). The time taken to plot also increases with the decreasing size of the line limit (shown by the slowing of the plot towards the end of the animation). This is because the dimensions of the fractal are increasing with decreasing size of line limit, R is plotting more lines and therefore takes longer to generate the graph.")
}
Challenge_F()
setwd("~/Documents/CMEECourseWork/Week9/code")
pwd()
getwd()
source('~/Documents/CMEECourseWork/Week9/code/ClusterRun.R', echo=TRUE)
# Initialise community with size given by the input 'size' and minimal diversity
community <- init_community_min(size)
load("/home/vlb19/Documents/CMEECourseWork/Week9/code/NRiter_001.rda")
# Create local test iter
iter <- 60
source('~/Documents/CMEECourseWork/Week9/code/ClusterRun.R', echo=TRUE)
# Create local test iter
iter <- 60
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 2
Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
# Create local test iter
iter <- 60
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 2
Set the other starting conditions
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 2
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
# Create local test iter
iter <- 3
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
# Create local test iter
iter <- 23
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Create local test iter
iter <- 26
# Create local test iter
iter <- 27
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
} else if (26 <= iter & iter <= 50){
size = 1000
} else if (51 <= iter & iter <= 75){
size = 2500
} else if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
# Create local test iter
iter <- 27
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
}
if (26 <= iter & iter <= 50){
size = 1000
}
if (51 <= iter & iter <= 75){
size = 2500
}
if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
# Create local test iter
iter <- 11
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
}
if (26 <= iter & iter <= 50){
size = 1000
}
if (51 <= iter & iter <= 75){
size = 2500
}
if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
load("/home/vlb19/Documents/CMEECourseWork/Week9/code/NR_011.rda")
# Create local test iter
iter <- 30
# Create the seed number
set.seed(iter)
# Select the correct iter for community in each parallel simulation
# based on the iter of iter
if (1 <= iter & iter <= 25){
size = 500
}
if (26 <= iter & iter <= 50){
size = 1000
}
if (51 <= iter & iter <= 75){
size = 2500
}
if (76 <= iter & iter <= 100){
size = 5000
} else {print("Sizing was wrong")}
# Set a wall time of 11.5 hours for all your jobs
wall_time = 0.5
#Set the other starting conditions
speciation_rate = 0.00585
interval_rich = 1
interval_oct = size/10
burn_in_generations = 8*size
# Add leading zeros to iter if it is less than three digits long to tidy up the file name
itername <- sprintf("_%03d",iter)
# Create a filename to store results. Set the end of the file name to
# be iter so files are not overwritted
output_file_name <- paste("NR", itername, ".rda", sep = "")
# Call the function cluster_run to do the simulation
cluster_run (speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)
source('~/Documents/CMEECourseWork/Week9/code/ClusterRun.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week9/code/ClusterRun.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week9/code/ClusterRun.R', echo=TRUE)
load("/home/vlb19/Documents/CMEECourseWork/Week9/code/NR_030.rda")
load("/home/vlb19/Documents/CMEECourseWork/Week9/code/NR_030.rda")
load("/home/vlb19/Documents/CMEECourseWork/Week9/code/NR_027.rda")
source('~/Documents/CMEECourseWork/Week9/code/vblanch_HPC_2019_main.R', echo=TRUE)
process_cluster_results()
setwd("~/Documents/CMEECourseWork/Week9/code")
process_cluster_results()
##########################################
# Question 20
process_cluster_results <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
# Initialise global variables to store running totals for each community size
VectorTotal500 <- 0
VectorTotal1000 <- 0
VectorTotal1500 <- 0
VectorTotal2000 <- 0
#Initialise generation counters for each community size
TotalTime500 <- 0
TotalTime1000 <- 0
TotalTime1500 <- 0
TotalTime2000 <- 0
# Create a list of all the iter file names within the directory
file_list <- list.files(pattern = "NR\\_[[:digit:]][[:digit:]][[:digit:]].rda$")
# load each file
for (each_file in 1:length(file_list)){
load(file = file_list[each_file])
#Find the correct row index for the first generation after the burn-in period
cutpoint <- ceiling(burn_in_generations/interval_oct)
#Create a new dataframe excluding the burn-in time
afterburnspeciesabundance <- SpeciesAbundance[c(cutpoint:length(SpeciesAbundance))]
if (size == 500){
# Sum all the rows in the new vector
for (row in afterburnspeciesabundance){
VectorTotal500 <- sum_vect(VectorTotal500,row)
}
# Save total time for this file into the global variable
TotalTime500 <- TotalTime500 + length(afterburnspeciesabundance)
}
else if (size == 1000){
# Sum all the rows in the new vector
for (row in afterburnspeciesabundance){
VectorTotal1000 <- sum_vect(VectorTotal500,row)
}
# Save total time for this file into the global variable
TotalTime1000 <- TotalTime1000 + length(afterburnspeciesabundance)
}
else if (size == 1500){
# Sum all the rows in the new vector
for (row in afterburnspeciesabundance){
VectorTotal1500 <- sum_vect(VectorTotal500,row)
}
# Save total time for this file into the global variable
TotalTime1500 <- TotalTime1500 + length(afterburnspeciesabundance)
}
else if (size == 2000){
# Sum all the rows in the new vector
for (row in afterburnspeciesabundance){
VectorTotal2000 <- sum_vect(VectorTotal2000,row)
}
# Save total time for this file into the global variable
TotalTime2000 <- TotalTime2000 + length(afterburnspeciesabundance)
}
else {print("Something has gone wrong somewhere")}
# Calculate average octave vectors for each community size
averageoctaves500 <- VectorTotal500/TotalTime500
averageoctaves1000 <- VectorTotal1000/TotalTime1000
averageoctaves1500 <- VectorTotal1500/TotalTime1500
averageoctaves2000 <- VectorTotal2000/TotalTime2000
}
# Plot four bar graphs in a multi-panel graph
par(mfrow=c(2,2))
barplot(averageoctaves500, main = "Community Size = 500", names.arg=1:length(averageoctaves500), ylab= "Octave Abundance", xlab = "Octave bins")
barplot(averageoctaves1000, main = "Community Size = 1000", names.arg=1:length(averageoctaves1000), ylab= "Octave Abundance", xlab = "Octave bins")
barplot(averageoctaves1500, main = "Community Size = 1500", names.arg=1:length(averageoctaves1500), ylab= "Octave Abundance", xlab = "Octave bins")
barplot(averageoctaves2000, main = "Community Size = 2000", names.arg=1:length(averageoctaves2000), ylab= "Octave Abundance", xlab = "Octave bins")
# Create a list of the four octave outputs plotted on the graphs in order of increasing community size
combined_results <- list(averageoctaves500, averageoctaves1000, averageoctaves1500, averageoctaves2000)
return(combined_results)
}
process_cluster_results()
sftp vlb19@login.cx1.hpc.ic.ac.uk
