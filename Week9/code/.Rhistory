abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
sum_vect <- function(x, y) {
diff <- length(x)-length(y)
if (diff > 0) {
y <- c(y, rep(0, abs(diff))) }
if (diff < 0) {
x <- c(x, rep(0, abs(diff))) }
vector_sum <- x + y
return(vector_sum)
}
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
barplot(octavesmax,generations)
barplot(octavesmin,generations)
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
# Question 16
question_16 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
}
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
}
barplot(averagemaxoctaves,generations)
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
barplot(averagemaxoctaves,generations)
# Question 16
question_16 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
}
question_16
question_16
par(2,2)
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
par(mfrow=c(1,2))
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
#octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
par(mfrow=c(1,2))
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
# Question 16
question_16 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
par(mfrow=c(1,2))
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations)
}
question_16()
# Question 16
question_16 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
#Run neutral model
richnessmax <- init_community_max(100)
richnessmin <- init_community_min(100)
speciation_rate = 0.1
duration = 200
generations = 2000
averagenumber = 0
for (i in 1:duration) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
}
#Record species abundance octave vector
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- octaves(abundancemin)
octavesmax <- octaves(abundancemax)
for (x in 1:generations) {
richnessmax <- neutral_generation_speciation(richnessmax, speciation_rate)
richnessmin <- neutral_generation_speciation(richnessmin, speciation_rate)
if (x%%20 == 0) {
averagenumber = averagenumber+1
abundancemin <- species_abundance(richnessmin)
abundancemax <- species_abundance(richnessmax)
octavesmin <- sum_vect(octavesmin, octaves(abundancemin))
octavesmax <- sum_vect(octavesmax, octaves(abundancemax))
}
}
# Calculate average octaves
averagemaxoctaves <- octavesmax/averagenumber
averageminoctaves <- octavesmin/averagenumber
par(mfrow=c(1,2))
barplot(averagemaxoctaves,generations)
barplot(averageminoctaves,generations
)
question_16()
quit()
# Question 30
fern2 <- function(start_position, direction, length)  {
#Plot first line
endposition1 <- turtle(start_position, direction, length)
#Plot subsequent lines
while (length > 1) {
#Choose left or right
direction <- sample(1:2, 1)
if (direction == 1) {
fern(endposition1, direction - (pi / 4), 0.38*length)
fern(endposition1, direction, 0.87*length)
}
else {
fern(endposition1, direction, 0.87*length)
fern(endposition1, direction + (pi / 4), 0.38*length)
}
}
}
draw_fern2 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type = "n", xlab="", ylab="", xlim = c(0,50), ylim= c(0,120))
fern2(start_position = c(25,0), direction = (pi / 2), length = 15)
}
draw_fern2()
# Question 30
fern2 <- function(start_position, direction, length)  {
#Plot first line
endposition1 <- turtle(start_position, direction, length)
#Plot subsequent lines
while (length > 10) {
#Choose left or right
direction <- sample(1:2, 1)
if (direction == 1) {
fern(endposition1, direction - (pi / 4), 0.38*length)
fern(endposition1, direction, 0.87*length)
}
else {
fern(endposition1, direction, 0.87*length)
fern(endposition1, direction + (pi / 4), 0.38*length)
}
}
}
draw_fern2 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(1, type = "n", xlab="", ylab="", xlim = c(0,50), ylim= c(0,120))
fern2(start_position = c(25,0), direction = (pi / 2), length = 15)
}
draw_fern()
setwd("~/Documents/CMEECourseWork/Week9/code")
fern2(c(25,0), (pi / 2), 15, 1)
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > x/5){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
# Call the fern function with starting values
return("type your written answer here")
}
##########################################
}
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > x/5){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
Challenge_F()
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > as.integer(x)/5){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
Challenge_F()
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > as.integer(x)/x){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
Challenge_F()
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > (as.integer(x)/5){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
# Call the fern function with starting values
return("type your written answer here")
}
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > (as.integer(x)/5)){
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
Challenge_F()
##########################################
# Challenge question F
Challenge_F <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
par(mfrow=c(2,2))
# Create an empty plot with the x axis limit set to 60 and the y axis limit set to 120
for (x in 1:4){
#Call turtle once to plot the first line, then store the end position coordinates
endposition1 <- turtle(start_position, direction, length)
#Set the limit of the line length
if (length > 5){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
} else if (length > 1){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
}
}
Challenge_F()#
Challenge_F()
#Set the limit of the line length
if (length > 5){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
} else if (length > 1){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
if (length > 5){
plot(1, type = "n", xlab="", ylab="", xlim = c(0,60), ylim= c(0,120))
# Plot the fractal to the right or left depending on the direction
fern2(endposition1, direction = direction - (pi / 4) *dir, 0.38*length, dir)
# Plot a straight line following the direction from which the fractal branches
fern2(endposition1, direction, 0.87*length, dir = dir * -1)
}
