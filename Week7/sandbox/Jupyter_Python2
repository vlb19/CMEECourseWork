
import scipy as sc

a = sc.array(range(5)) #a one-dimensional array
a

print(type(a))

print(type(a[0]))

a = sc.array(range(5), float)
a 

a.dtype #check type

x = sc.arange(5)
x

x= sc.arange(5.) #directly specify float using decimal
x

x.shape

b = sc.array([i for i in range(10) if i % 2 ==1]) # odd numbers between 1 and 10
b 

c = b.tolist() #convert back to list
c 

mat = sc.array([[0,1], [2,3]])
mat

mat.shape

mat[1] #accessing whole 2nd row, remembering indexing starts at 0 in python

mat[:,1] #accessing whole 2nd column

mat[0,0]
mat[1,0]
mat[:,0]
import scipy as sc

a = sc.array(range(5)) #a one-dimensional array
a

print(type(a))

print(type(a[0]))

a = sc.array(range(5), float)
a 

a.dtype #check type

x = sc.arange(5)
x

x= sc.arange(5.) #directly specify float using decimal
x

x.shape

b = sc.array([i for i in range(10) if i % 2 ==1]) # odd numbers between 1 and 10
b 

c = b.tolist() #convert back to list
c 

mat = sc.array([[0,1], [2,3]])
mat

mat.shape

mat[1] #accessing whole 2nd row, remembering indexing starts at 0 in python

mat[:,1] #accessing whole 2nd column

mat[0,0]
mat[1,0]
mat[:,0]
mat[0,-1]
mat[-1,0]
mat[0,-2]

mat[0,0] = -1 #replace a single element
mat

mat[:,0] = [12,12] #replace a whole column
mat

sc.append(mat, [[12,12]], axis = 0) #append row, note axis specification

sc.append(mat, [[12],[12]], axis=1) #append column

newRow = [[12,12]] #create new row

mat = sc.append(mat, newRow, axis = 0)
mat[0,-1]
mat[-1,0]
mat[0,-2]

mat[0,0] = -1 #replace a single element
mat

mat[:,0] = [12,12] #replace a whole column
mat

sc.append(mat, [[12,12]], axis = 0) #append row, note axis specification

sc.append(mat, [[12],[12]], axis=1) #append column

newRow = [[12,12]] #create new row

mat = sc.append(mat, newRow, axis = 0)
mat 

sc.delete(mat,3,0) #Delete 3rd row

mat = sc.array([[0,1],[2,3]])
mat0 = sc.array([[0,10],[-1,3]])
sc.concatenate((mat,mat0), axis = 0)

### Flattening or reshaping arrays

mat.ravel() # NOTE: ravel is row-priority - happens row by row
mat.reshape((4,1)) # this is different from ravel

mat.reshape((1,4)) # NOTE: reshaping is also row-priority

mat.reshape((3,1)) # But total elements must remain the same!

### Pre-allocating arrays 
sc.ones((4,2)) #(4,2) are the (row,col) array dimensions

sc.zeros((4,2)) # or zeros

m = sc.identity(4) # create an idenity matrix
m

m.fill(16)
m

### numpy matrices
mm = sc.arange(16)
mm = mm.reshape(4,4) #convert to matrix
mm

mm.transpose()
mm + mm.transpose()
mm - mm.transpose()
mm * mm.transpose()
mm // mm.transpose() # returns an error 
mm // (mm + 1).transpose()
mm*sc.pi 

mm.dot(mm)

mm = sc.matrix(mm) # convert to scipy matrix class
mm

print(type(mm))

mm*mm # now matrix multiplication is syntactically easier

import scipy.linalg

### Scipy stats
import scipy.stats
scipy.stats.norm.rvs(size = 10) # 10 samples from N(0,1)
scipy.stats.randint.rvs(0, 10, size = 7) # Random integers between 0 and 10

### Numerical integration using scipy
## The Lotka-Volterra model

import scipy.integrate as integrate

def dCR_dt(pops, t=0):
    
    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

type(dCR_dt)

# assign parameter values
r = 1.
a = 0.1
z = 1.5
e = 0.75

#define time vector integrating from time point 0 to 15 using 1000 sub-divisions of time
t = sc.linspace(0, 15, 1000)

# Setting the initial conditions for the two populations (10 resources and 5 consumers per unit area), and convert the two into an array (because our function takes an array as input)

R0 = 10 
C0 = 5
RC0 = sc.array([R0, C0])

# Numerically integrate this system forward from the starting conditions
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
pops

type(infodict)

infodict.keys()

infodict['message']

### Plotting in Python
import matplotlib.pylab as p

f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') #Plot
p.plot(t, pops[:,1], 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.show()

f1.savefig('../results/LV_model.pdf') #Save figure